# coding=utf-8
import pygame               # –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ. –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
import math                 # –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç. —Ñ—É–Ω–∫—Ü–∏–π
import RPi.GPIO as GPIO     # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏ GPIO
import time                 # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
import serial               # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ UART
import os


running = 1                 # –º–∞—Ä–∫–µ—Ä –ø–æ–ª–æ–∂–µ–Ω–∏—è –ù–í–û
angle = math.pi/2           # —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
width = 105*math.pi/360     # —à–∏—Ä–∏–Ω–∞ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
marker = 1.65               # –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
angle_prev = 1              # —Å–∏–Ω—Ö. —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
width_prev = 1              # —Å–∏–Ω—Ö.—à–∏—Ä–∏–Ω–∞ —Å–µ–∫—Ç–æ—Ä–∞ –ø–æ–∏—Å–∫–∞
marker_prev = 1             # —Å–∏–Ω—Ö. –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
running_prev = 1            # —Å–∏–Ω—Ö. –º–∞—Ä–∫–µ—Ä –ø–æ–ª–æ–∂–µ–Ω–∏—è –ù–í–û
north_angle = (math.pi+math.pi/6)   #–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ—Ç–∫–∏ —Å–µ–≤–µ—Ä
FPS=60                      # –∫–æ–ª-–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
r_value=0                   # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ UART
pwr_pin = 7



##########################     –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–ª–µ—è ###############################
#screen_size = (1280, 1024)
#screen_center = (int(screen_size[0]/2+120), int(screen_size[1]/2)+20)
#screen_radius = (min(screen_center)-50)

screen_size = (1024, 768)                                                           # —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
screen_center = (int(screen_size[0]/2+110), int(screen_size[1]/2)+10)               # —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
screen_radius = (min(screen_center)-20)                                             # —Ä–∞–¥–∏—É—Å —Ä–∞–¥–∞—Ä–∞

BACK_COL = (0, 138, 41)                     # —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
LINES_COL = (255, 255, 255)                 # —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏

############   ‚##########################
def init():
    GPIO.setwarnings(True)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(pwr_pin, GPIO.IN)
    GPIO.add_event_detect(pwr_pin, GPIO.RISING, callback=turning_off)
    return
############   ###########################

##########  ##############
def turning_off(pwr_pin):
        print 'System shuts down'
        GPIO.cleanup()
        #os.system("sudo reboot")
        os.system("sudo shutdown -h now")
        sleep(1)
############   #################
init()

pygame.init()                               # –ø–æ–¥–∫–ª—é–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Ä–∏—Å–æ–≤–∫–∏


screen = pygame.display.set_mode(screen_size, pygame.FULLSCREEN)          # —É–∫–∞–∑–∞–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
clock = pygame.time.Clock()                                               # –º–µ—Ç–æ–¥ clock –¥–ª—è —á–∞—Å—Ç–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
pygame.mouse.set_visible(False)                                           # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

x_pos_north = screen_radius*math.cos(north_angle)                         # x –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ–≤–µ—Ä–∞
y_pos_north = screen_radius*math.sin(north_angle)                         # y –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ–≤–µ—Ä–∞


#################   serial is defined here   ######################################
ser = serial.Serial(
        port='/dev/ttyAMA0',                #—É–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞

        baudrate = 38400,                   # —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
        parity=serial.PARITY_NONE,          # —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ—Ä—Ç–∞
        stopbits=serial.STOPBITS_ONE,       # —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞–π—Ç–∞
        bytesize=serial.EIGHTBITS,          # —á–∏—Å–ª–æ –±–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        timeout=0.1                         # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —á—Ç–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞
)


#######################################################
###########     –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª        ##################
#######################################################

while True:
# ???    sleep(0.06)
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:       #–∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞
            raise SystemExit

######   –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö UART  ########

    got_str = ser.readline()  #–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    splitting = got_str.split() #—Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    res = []  # —Å–ø–∏—Å–æ–∫ –¥–ª—è —á–∏—Å–ª–∞
    word = [] # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–æ–≤–∞

######   –≤—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ä–µ–¥. —Å–ª–æ–≤–æ –∏ —á–∏—Å–ª. –∑–Ω–∞—á–µ–Ω–∏–µ
    for r_value in splitting:
           try:
                   res.append(float(r_value))
           except ValueError:
                   continue
    [float(r_value) for r_value in res]
    value = (r_value / 100) # –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å–ª–æ

    for x in range(len(splitting)):
         if splitting[x].isalpha():
                word = splitting[x] # –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–æ–≤–æ


    if (word == 'a'): #–æ–ø—Ä–¥–µ–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞
        angle = value
    if (word == 'm'): #–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
        marker = value


###############  —Ä–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤   ###################


    x_pos_left = screen_radius*math.cos(angle+width-(math.pi/2)) # —Ö –ª–µ–≤–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
    y_pos_left = screen_radius*math.sin(angle+width-(math.pi/2)) # —É –ª–µ–≤–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞

    x_pos_right = screen_radius*math.cos(angle-width-(math.pi/2)) # —Ö –ø—Ä–∞–≤–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
    y_pos_right = screen_radius*math.sin(angle-width-(math.pi/2)) # —É –ø—Ä–∞–≤–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞

    x_pos_add = screen_radius*math.cos(marker-(math.pi/2)) # x –º–∞—Ä–∫–µ—Ä–∞
    y_pos_add = screen_radius*math.sin(marker-(math.pi/2)) # y –º–∞—Ä–∫–µ—Ä–∞

    x_pos_running = screen_radius*math.cos(running)         # —Ö –º–∞—Ä–∫–µ—Ä –≤—Ä–∞—â–µ–Ω–∏—è –ù–í–û
    y_pos_running = screen_radius*math.sin(running)         # —É –º–∞—Ä–∫–µ—Ä –≤—Ä–∞—â–µ–Ω–∏—è –ù–í–û

################   –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏   #################################

    #screen.fill(BACK_COL)           #—Å–Ω—è—Ç—å –∫–æ–º–º–µ–Ω—Ç., –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–ª–∏–≤–∫–∞ –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞

    # —Ñ–æ–Ω —Ä–∞–¥–∞—Ä–∞
    bkgnd = pygame.draw.circle(screen, (BACK_COL), (screen_center), screen_radius, 0)

    # –∫—Ä–∞–π —Ä–∞–¥–∞—Ä–∞
    pygame.draw.circle(screen, (LINES_COL), (screen_center), screen_radius, 2)

    # –æ—Ç–º–µ—Ç–∫–∞ —Å–µ–≤–µ—Ä
    pygame.draw.line(screen, (LINES_COL), (screen_center[0]+x_pos_north/1.15, screen_center[1]+y_pos_north/1.15), (screen_center[0]+x_pos_north, screen_center[1]+y_pos_north), 4)

    # –ª–µ–≤–∞—è –ª–∏–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞
    pygame.draw.line(screen, (LINES_COL), (screen_center[0], screen_center[1]), (screen_center[0]+x_pos_left, screen_center[1]+y_pos_left), 2)

    # –ø—Ä–∞–≤–∞—è –ª–∏–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞
    pygame.draw.line(screen, (LINES_COL), (screen_center[0], screen_center[1]), (screen_center[0]+x_pos_right, screen_center[1]+y_pos_right), 2)

    # –º–∞—Ä–∫–µ—Ä
    pygame.draw.line(screen, (LINES_COL), (screen_center[0]+x_pos_add/1.25, screen_center[1]+y_pos_add/1.25), (screen_center[0]+x_pos_add, screen_center[1]+y_pos_add), 4)

    # –º–∞—Ä–∫–µ—Ä –ø–æ–ª–æ–∂–µ–Ω–∏—è –ù–í–û
    runner = pygame.draw.line(screen, (LINES_COL), (screen_center[0]+x_pos_running/1.15, screen_center[1]+y_pos_running/1.15), (screen_center[0]+x_pos_running, screen_center[1]+y_pos_running), 12)
    running = running + math.pi/16
    if (running >= 2*math.pi):          # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ù–í–û
        running = 0

############        —Å–∏—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤      #################
    if running != running_prev:
         pygame.display.update(bkgnd)
         pygame.display.update(runner)
    if angle != angle_prev or width != width_prev or marker != marker_prev:
         pygame.display.update()
         angle_prev = angle
         width_prev = width
         marker_prev = marker   #lul

